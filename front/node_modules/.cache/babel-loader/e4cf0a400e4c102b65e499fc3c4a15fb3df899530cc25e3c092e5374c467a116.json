{"ast":null,"code":"const API_URL = 'http://localhost:32831';\nexport const clienteService = {\n  async getAll() {\n    console.log('üîÑ Fazendo requisi√ß√£o GET para:', `${API_URL}/cliente/clientes`);\n    try {\n      const response = await fetch(`${API_URL}/cliente/clientes`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        mode: 'cors'\n      });\n      console.log('üì° Status da resposta:', response.status);\n      console.log('üì° Headers da resposta:', Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('‚ùå Erro na resposta:', errorText);\n        throw new Error(`Erro ao buscar clientes: ${response.status} - ${errorText}`);\n      }\n      const data = await response.json();\n      console.log('‚úÖ Dados recebidos:', data);\n      return data;\n    } catch (error) {\n      console.error('‚ùå Erro na requisi√ß√£o:', error);\n      throw error;\n    }\n  },\n  async getById(id) {\n    console.log('üîÑ Fazendo requisi√ß√£o GET para:', `${API_URL}/cliente/${id}`);\n    try {\n      const response = await fetch(`${API_URL}/cliente/${id}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        mode: 'cors'\n      });\n      console.log('üì° Status da resposta:', response.status);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('‚ùå Erro na resposta:', errorText);\n        throw new Error(`Erro ao buscar cliente: ${response.status} - ${errorText}`);\n      }\n      const data = await response.json();\n      console.log('‚úÖ Dados recebidos:', data);\n      return data;\n    } catch (error) {\n      console.error('‚ùå Erro na requisi√ß√£o:', error);\n      throw error;\n    }\n  },\n  async create(cliente) {\n    console.log('üîÑ Fazendo requisi√ß√£o POST para:', `${API_URL}/cliente/cadastrar`);\n    console.log('üì§ Dados enviados:', cliente);\n    try {\n      const response = await fetch(`${API_URL}/cliente/cadastrar`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        mode: 'cors',\n        body: JSON.stringify(cliente)\n      });\n      console.log('üì° Status da resposta:', response.status);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('‚ùå Erro na resposta:', errorText);\n        throw new Error(`Erro ao criar cliente: ${response.status} - ${errorText}`);\n      }\n      console.log('‚úÖ Cliente criado com sucesso');\n    } catch (error) {\n      console.error('‚ùå Erro na requisi√ß√£o:', error);\n      throw error;\n    }\n  },\n  async update(id, cliente) {\n    console.log('üîÑ Fazendo requisi√ß√£o PUT para:', `${API_URL}/cliente/atualizar`);\n    console.log('üì§ Dados enviados:', {\n      ...cliente,\n      id\n    });\n    try {\n      const clienteComId = {\n        ...cliente,\n        id\n      };\n      const response = await fetch(`${API_URL}/cliente/atualizar`, {\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        mode: 'cors',\n        body: JSON.stringify(clienteComId)\n      });\n      console.log('üì° Status da resposta:', response.status);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('‚ùå Erro na resposta:', errorText);\n        throw new Error(`Erro ao atualizar cliente: ${response.status} - ${errorText}`);\n      }\n      console.log('‚úÖ Cliente atualizado com sucesso');\n    } catch (error) {\n      console.error('‚ùå Erro na requisi√ß√£o:', error);\n      throw error;\n    }\n  },\n  async delete(id) {\n    console.log('üîÑ Fazendo requisi√ß√£o DELETE para:', `${API_URL}/cliente/excluir`);\n    console.log('üì§ ID do cliente:', id);\n    try {\n      const response = await fetch(`${API_URL}/cliente/excluir`, {\n        method: 'DELETE',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        mode: 'cors',\n        body: JSON.stringify({\n          id\n        })\n      });\n      console.log('üì° Status da resposta:', response.status);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('‚ùå Erro na resposta:', errorText);\n        throw new Error(`Erro ao deletar cliente: ${response.status} - ${errorText}`);\n      }\n      console.log('‚úÖ Cliente deletado com sucesso');\n    } catch (error) {\n      console.error('‚ùå Erro na requisi√ß√£o:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["API_URL","clienteService","getAll","console","log","response","fetch","method","headers","mode","status","Object","fromEntries","entries","ok","errorText","text","error","Error","data","json","getById","id","create","cliente","body","JSON","stringify","update","clienteComId","delete"],"sources":["/Users/pedrovaz/Library/Mobile Documents/com~apple~CloudDocs/PERSONAL/4. Estudos/Fatec - DSM/2-SEM/Tecnicas Progr I/atv/atviv/front/src/services/clienteService.ts"],"sourcesContent":["import { Cliente, ClienteFormData } from '../types/Cliente';\n\nconst API_URL = 'http://localhost:32831';\n\nexport const clienteService = {\n    async getAll(): Promise<Cliente[]> {\n        console.log('üîÑ Fazendo requisi√ß√£o GET para:', `${API_URL}/cliente/clientes`);\n        \n        try {\n            const response = await fetch(`${API_URL}/cliente/clientes`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                mode: 'cors',\n            });\n            \n            console.log('üì° Status da resposta:', response.status);\n            console.log('üì° Headers da resposta:', Object.fromEntries(response.headers.entries()));\n            \n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error('‚ùå Erro na resposta:', errorText);\n                throw new Error(`Erro ao buscar clientes: ${response.status} - ${errorText}`);\n            }\n            \n            const data = await response.json();\n            console.log('‚úÖ Dados recebidos:', data);\n            return data;\n        } catch (error) {\n            console.error('‚ùå Erro na requisi√ß√£o:', error);\n            throw error;\n        }\n    },\n\n    async getById(id: number): Promise<Cliente> {\n        console.log('üîÑ Fazendo requisi√ß√£o GET para:', `${API_URL}/cliente/${id}`);\n        \n        try {\n            const response = await fetch(`${API_URL}/cliente/${id}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                mode: 'cors',\n            });\n            \n            console.log('üì° Status da resposta:', response.status);\n            \n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error('‚ùå Erro na resposta:', errorText);\n                throw new Error(`Erro ao buscar cliente: ${response.status} - ${errorText}`);\n            }\n            \n            const data = await response.json();\n            console.log('‚úÖ Dados recebidos:', data);\n            return data;\n        } catch (error) {\n            console.error('‚ùå Erro na requisi√ß√£o:', error);\n            throw error;\n        }\n    },\n\n    async create(cliente: ClienteFormData): Promise<void> {\n        console.log('üîÑ Fazendo requisi√ß√£o POST para:', `${API_URL}/cliente/cadastrar`);\n        console.log('üì§ Dados enviados:', cliente);\n        \n        try {\n            const response = await fetch(`${API_URL}/cliente/cadastrar`, {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                mode: 'cors',\n                body: JSON.stringify(cliente),\n            });\n            \n            console.log('üì° Status da resposta:', response.status);\n            \n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error('‚ùå Erro na resposta:', errorText);\n                throw new Error(`Erro ao criar cliente: ${response.status} - ${errorText}`);\n            }\n            \n            console.log('‚úÖ Cliente criado com sucesso');\n        } catch (error) {\n            console.error('‚ùå Erro na requisi√ß√£o:', error);\n            throw error;\n        }\n    },\n\n    async update(id: number, cliente: ClienteFormData): Promise<void> {\n        console.log('üîÑ Fazendo requisi√ß√£o PUT para:', `${API_URL}/cliente/atualizar`);\n        console.log('üì§ Dados enviados:', { ...cliente, id });\n        \n        try {\n            const clienteComId = { ...cliente, id };\n            const response = await fetch(`${API_URL}/cliente/atualizar`, {\n                method: 'PUT',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                mode: 'cors',\n                body: JSON.stringify(clienteComId),\n            });\n            \n            console.log('üì° Status da resposta:', response.status);\n            \n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error('‚ùå Erro na resposta:', errorText);\n                throw new Error(`Erro ao atualizar cliente: ${response.status} - ${errorText}`);\n            }\n            \n            console.log('‚úÖ Cliente atualizado com sucesso');\n        } catch (error) {\n            console.error('‚ùå Erro na requisi√ß√£o:', error);\n            throw error;\n        }\n    },\n\n    async delete(id: number): Promise<void> {\n        console.log('üîÑ Fazendo requisi√ß√£o DELETE para:', `${API_URL}/cliente/excluir`);\n        console.log('üì§ ID do cliente:', id);\n        \n        try {\n            const response = await fetch(`${API_URL}/cliente/excluir`, {\n                method: 'DELETE',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                mode: 'cors',\n                body: JSON.stringify({ id }),\n            });\n            \n            console.log('üì° Status da resposta:', response.status);\n            \n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error('‚ùå Erro na resposta:', errorText);\n                throw new Error(`Erro ao deletar cliente: ${response.status} - ${errorText}`);\n            }\n            \n            console.log('‚úÖ Cliente deletado com sucesso');\n        } catch (error) {\n            console.error('‚ùå Erro na requisi√ß√£o:', error);\n            throw error;\n        }\n    }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
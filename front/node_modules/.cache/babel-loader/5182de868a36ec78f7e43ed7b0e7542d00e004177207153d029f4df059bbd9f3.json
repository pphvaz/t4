{"ast":null,"code":"const API_URL = 'http://localhost:32831';\nexport const clienteService = {\n  // Método GET para buscar todos os clientes\n  async getAll() {\n    const response = await fetch(`${API_URL}/cliente/clientes`);\n    console.log('GET /cliente/clientes - Status:', response.status);\n    const data = await response.json();\n    console.log('Dados recebidos:', data);\n    return data;\n  },\n  // Método GET para buscar um cliente por ID\n  async getById(id) {\n    const response = await fetch(`${API_URL}/cliente/${id}`);\n    console.log(`GET /cliente/${id} - Status:`, response.status);\n    const data = await response.json();\n    console.log('Dados recebidos:', data);\n    return data;\n  },\n  // Método POST para criar um novo cliente\n  async create(cliente) {\n    // Converter array de endereços para endereço único (backend espera endereco, não enderecos)\n    const clienteParaBackend = {\n      nome: cliente.nome,\n      email: cliente.email,\n      endereco: cliente.enderecos[0],\n      // Pega o primeiro endereço\n      telefones: cliente.telefones\n    };\n    console.log('POST /cliente/cadastrar - Dados enviados:', clienteParaBackend);\n    const response = await fetch(`${API_URL}/cliente/cadastrar`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(clienteParaBackend)\n    });\n    console.log('POST /cliente/cadastrar - Status:', response.status);\n  },\n  // Método PUT para atualizar um cliente\n  async update(id, cliente) {\n    // Converter array de endereços para endereço único\n    const clienteParaBackend = {\n      id: id,\n      nome: cliente.nome,\n      email: cliente.email,\n      endereco: cliente.enderecos[0],\n      // Pega o primeiro endereço\n      telefones: cliente.telefones\n    };\n    console.log('PUT /cliente/atualizar - Dados enviados:', clienteParaBackend);\n    const response = await fetch(`${API_URL}/cliente/atualizar`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(clienteParaBackend)\n    });\n    console.log('PUT /cliente/atualizar - Status:', response.status);\n  },\n  // Método DELETE para excluir um cliente\n  async delete(id) {\n    console.log('DELETE /cliente/excluir - ID:', id);\n    const response = await fetch(`${API_URL}/cliente/excluir`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id\n      })\n    });\n    console.log('DELETE /cliente/excluir - Status:', response.status);\n  }\n};","map":{"version":3,"names":["API_URL","clienteService","getAll","response","fetch","console","log","status","data","json","getById","id","create","cliente","clienteParaBackend","nome","email","endereco","enderecos","telefones","method","headers","body","JSON","stringify","update","delete"],"sources":["/Users/pedrovaz/Library/Mobile Documents/com~apple~CloudDocs/PERSONAL/4. Estudos/Fatec - DSM/2-SEM/Tecnicas Progr I/atv/atviv/front/src/services/clienteService.ts"],"sourcesContent":["import { Cliente, ClienteFormData } from '../types/Cliente';\n\nconst API_URL = 'http://localhost:32831';\n\nexport const clienteService = {\n    // Método GET para buscar todos os clientes\n    async getAll(): Promise<Cliente[]> {\n        const response = await fetch(`${API_URL}/cliente/clientes`);\n        console.log('GET /cliente/clientes - Status:', response.status);\n        const data = await response.json();\n        console.log('Dados recebidos:', data);\n        return data;\n    },\n\n    // Método GET para buscar um cliente por ID\n    async getById(id: number): Promise<Cliente> {\n        const response = await fetch(`${API_URL}/cliente/${id}`);\n        console.log(`GET /cliente/${id} - Status:`, response.status);\n        const data = await response.json();\n        console.log('Dados recebidos:', data);\n        return data;\n    },\n\n    // Método POST para criar um novo cliente\n    async create(cliente: ClienteFormData): Promise<void> {\n        // Converter array de endereços para endereço único (backend espera endereco, não enderecos)\n        const clienteParaBackend = {\n            nome: cliente.nome,\n            email: cliente.email,\n            endereco: cliente.enderecos[0], // Pega o primeiro endereço\n            telefones: cliente.telefones\n        };\n\n        console.log('POST /cliente/cadastrar - Dados enviados:', clienteParaBackend);\n        const response = await fetch(`${API_URL}/cliente/cadastrar`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(clienteParaBackend),\n        });\n        console.log('POST /cliente/cadastrar - Status:', response.status);\n    },\n\n    // Método PUT para atualizar um cliente\n    async update(id: number, cliente: ClienteFormData): Promise<void> {\n        // Converter array de endereços para endereço único\n        const clienteParaBackend = {\n            id: id,\n            nome: cliente.nome,\n            email: cliente.email,\n            endereco: cliente.enderecos[0], // Pega o primeiro endereço\n            telefones: cliente.telefones\n        };\n\n        console.log('PUT /cliente/atualizar - Dados enviados:', clienteParaBackend);\n        const response = await fetch(`${API_URL}/cliente/atualizar`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(clienteParaBackend),\n        });\n        console.log('PUT /cliente/atualizar - Status:', response.status);\n    },\n\n    // Método DELETE para excluir um cliente\n    async delete(id: number): Promise<void> {\n        console.log('DELETE /cliente/excluir - ID:', id);\n        const response = await fetch(`${API_URL}/cliente/excluir`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ id }),\n        });\n        console.log('DELETE /cliente/excluir - Status:', response.status);\n    }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}